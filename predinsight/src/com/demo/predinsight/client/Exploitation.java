package com.demo.predinsight.client;

import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

import com.google.gwt.core.client.GWT;
import com.google.gwt.dom.client.Style.Unit;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.dom.client.ClickHandler;
import com.google.gwt.user.client.rpc.AsyncCallback;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.CheckBox;
import com.google.gwt.user.client.ui.DockLayoutPanel;
import com.google.gwt.user.client.ui.DoubleBox;
import com.google.gwt.user.client.ui.FlexTable;
import com.google.gwt.user.client.ui.HasHorizontalAlignment;
import com.google.gwt.user.client.ui.HasVerticalAlignment;
import com.google.gwt.user.client.ui.HorizontalPanel;
import com.google.gwt.user.client.ui.Label;
import com.google.gwt.user.client.ui.ListBox;
import com.google.gwt.user.client.ui.RadioButton;
import com.google.gwt.user.client.ui.VerticalPanel;

public class Exploitation extends Content {

	private DockLayoutPanel mainPanel = new DockLayoutPanel((Unit.PX));
	
	private HorizontalPanel centerPanel = new HorizontalPanel();
		private VerticalPanel generatedInstancePanel = new VerticalPanel();
			private Label instTitle = new Label("Generated instance");
		private VerticalPanel instancePanel = new VerticalPanel();
			private HorizontalPanel attribaddPanel = new HorizontalPanel();
				private HorizontalPanel attribListPanel = new HorizontalPanel();
					private ListBox attribList = new ListBox();
				private Button attribAddButton = new Button("add attribute");
			private Label instLabel = new Label("Personnalized instance");
			private FlexTable attributesTable = new FlexTable();
		
	private HorizontalPanel attribManagement = new HorizontalPanel();
		
		private VerticalPanel radioPanel = new VerticalPanel();
			private Label radioLabel = new Label("Undefined attributes default setting");
			private RadioButton randomRadio = new RadioButton("defaultValue", "random");
			private RadioButton meanRadio = new RadioButton("defaultValue", "mean");
			private RadioButton missingRadio = new RadioButton("defaultValue", "missing");
		
	private HorizontalPanel buttonsPanel = new HorizontalPanel();
		private Button predictButton = new Button("predict");
		private Button startOverButton = new Button("start over");
		
	private VerticalPanel explPanel = new VerticalPanel();
		private Label explTitle = new Label("Influences");
	
	private TitlePanel mainTitle = new TitlePanel();
	
	private VerticalPanel instrPanel = new VerticalPanel();
		private Label instructions = new Label("Select your desired flow and adapt your dataset");
	
	private ArrayList<String> currentAttributes = new ArrayList<String>();
	
	private String[] test = {};
	private double[] test2 = {};
	
	AttributesInformations attInfs;	
	
	private ExplServiceAsync explsvc = GWT.create(ExplService.class);
	
	public Exploitation() {
		
		instLabel.setStyleName("parttitle");
		explTitle.setStyleName("parttitle");
		
		attributesTable.setCellPadding(6);
		
		attributesTable.setText(0, 0, "name");
		attributesTable.setText(0, 1, "missing");
		attributesTable.setText(0, 2, "value");
		attributesTable.setText(0, 3, "remove");
		
		attributesTable.setStyleName("attributeList");
		attributesTable.getRowFormatter().setStyleName(0, "attributeListHeader");
		attributesTable.getCellFormatter().addStyleName(0, 0, "nameColumn");
		attributesTable.getCellFormatter().addStyleName(0, 1, "missingColumn");
		attributesTable.getCellFormatter().addStyleName(0, 2, "valueColumn");
		attributesTable.getCellFormatter().addStyleName(0, 3, "removeColumn");
		
		attribManagement.add(radioPanel);
		
		attribListPanel.add(attribList);
		attribaddPanel.add(attribListPanel);
		attribList.setStyleName("list");
		attribListPanel.setStyleName("listpanel");
		attribaddPanel.add(attribAddButton);
		
		instancePanel.setVerticalAlignment(HasVerticalAlignment.ALIGN_TOP);
		instancePanel.setSpacing(5);
		instancePanel.add(instLabel);
		instancePanel.add(attribaddPanel);
		instancePanel.add(attributesTable);
		
		centerPanel.add(instancePanel);
		centerPanel.add(generatedInstancePanel);
		
		
		radioPanel.add(radioLabel);
		radioPanel.add(randomRadio);
		radioPanel.add(meanRadio);
		radioPanel.add(missingRadio);
		missingRadio.setValue(true);
		radioPanel.setStyleName("radiopanel");
		
		buttonsPanel.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_RIGHT);
		buttonsPanel.add(startOverButton);
		buttonsPanel.add(predictButton);
		
		instrPanel.add(instructions);
		instrPanel.setStyleName("instrpnl");
		instructions.setStyleName("instr");
		
		explPanel.add(explTitle);
		
		mainPanel.addNorth(mainTitle, 50);
		mainTitle.setSize("100%", "100%");
		
		mainPanel.addNorth(instrPanel, 50);
		instrPanel.setSize("100%", "75%");
		instructions.setSize("100%", "100%");
		
		mainPanel.addSouth(buttonsPanel, 50);
		buttonsPanel.setSize("100%", "100%");
		buttonsPanel.setStyleName("bottompanel");
		
		mainPanel.addSouth(attribManagement, 100);
		attribManagement.setStyleName("attribmanagementpanel");
		
		mainPanel.addEast(explPanel,400);
		explPanel.setSize("100%", "100%");
		explPanel.setStyleName("eastpanel");
		
		mainPanel.add(centerPanel);
		instancePanel.setStyleName("mainpanel");
		centerPanel.setStyleName("mainpanel");
		generatedInstancePanel.setStyleName("mainpanel");
		
		AsyncCallback<AttributesInformations> callbackinfs = new AsyncCallback<AttributesInformations>() {
		    public void onFailure(Throwable caught) {
		    	Logger rootlogger = Logger.getLogger("");
		    	rootlogger.log(Level.SEVERE, "error",caught);
		    }
		    public void onSuccess(AttributesInformations result) {
		    	attInfs = result;
		    	for(int i = 0; i<result.getAttNames().length ;i++) {
					attribList.addItem(result.getAttNames()[i]);
				}
		    }
		};
		
		AsyncCallback<Influence> callbackpred = new AsyncCallback<Influence>() {
		    public void onFailure(Throwable caught) {
		    	Logger rootlogger = Logger.getLogger("");
		    	rootlogger.log(Level.SEVERE, "error",caught);
		    }
		    public void onSuccess(Influence result) {
		    	explPanel.clear();
		    	generatedInstancePanel.clear();
		    	explPanel.add(explTitle);
		    	generatedInstancePanel.add(instTitle);
		    	InfDesc infdesc = new InfDesc("", ""+result.getPred(), result.getAttNames(), result.getInf());
		    	InstanceDesc instdesc = new InstanceDesc("generated instance", "", result.getAttNames(), result.getInstance());
				explPanel.add(infdesc);
				generatedInstancePanel.add(instdesc);
				infdesc.setStyleName("infdesc");
				instdesc.setStyleName("instdesc");
		    }
		};
		
		explsvc.getinfs(callbackinfs);
		
		attribAddButton.addClickHandler(new ClickHandler() {
		   public void onClick(ClickEvent event) {
		     addAttrib();
		   }
		});
		
		startOverButton.addClickHandler(new ClickHandler() {
			public void onClick(ClickEvent event) {
				ContentContainer.getInstance().setContent(new Selection());
			}
		});
		
		predictButton.addClickHandler(new ClickHandler() {
		   public void onClick(ClickEvent event) {
			   	int rowsnb = attributesTable.getRowCount();
			   	if(rowsnb>1) {
			   		String[] attributes = new String[rowsnb-1];
			   		double[] values = new double[rowsnb-1];
			   		String param;
			   		if(randomRadio.getValue()) {
			   			param = "random";
			   		}
			   		else if(meanRadio.getValue()) {
			   			param = "mean";
			   		}
			   		else {
			   			param = "missing";
			   		}
			   		for (int i=1; i<rowsnb; i++) {
			   			attributes[i-1] = attributesTable.getText(i, 0);
			   			
			   			if(isnominal(attributesTable.getText(i, 0))) {
			   				ListBox list = (ListBox)attributesTable.getWidget(i, 2);
			   				values[i-1] = list.getSelectedIndex();
			   			}
			   			else {
			   				DoubleBox box = (DoubleBox)attributesTable.getWidget(i, 2);
			   				values[i-1] = box.getValue();
			   			}
			   		}
			   		
			   		explsvc.predictOne(attributes, values, param, callbackpred);
			   	}
		   }
		});
		
		//mainPanel.setSize("1600px","800px");
		
		initWidget(mainPanel);
	}
	
	
	
	protected boolean isnominal(String text) {
		boolean nominal = false;
		for(int i=0; i<attInfs.getAttNames().length; i++) {
			if(text.equals(attInfs.getAttNames()[i])) {
				nominal = attInfs.getAttTypes()[i].equals("nominal");
			}
		}
		return nominal;
	}



	private void addAttrib() {
		String attribute = attribList.getSelectedValue();
		int attIndex = attribList.getSelectedIndex();
		for(int i=0; i<attInfs.getAttNames().length; i++) {
			if(attribute.equals(attInfs.getAttNames()[i])) {
				attIndex = i;
				break;
			}
		}
		
		if (currentAttributes.contains(attribute))
			return;
		
		 // Add the stock to the table.
		int row = attributesTable.getRowCount();
		currentAttributes.add(attribute);
		attributesTable.setText(row, 0, attribute);
		
		CheckBox check = new CheckBox();
		attributesTable.setWidget(row, 1, check);
		
		if(attInfs.getAttTypes()[attIndex].equals("numeric")) {
			//HorizontalPanel panel = new HorizontalPanel();
			DoubleBox box = new DoubleBox();
			box.setValue(attInfs.getAttmean()[attIndex]);
			attributesTable.setWidget(row, 2, box);
		}
		else {
			ListBox list = new ListBox();
			for(int i = 0; i<attInfs.getAttvalues().get(attIndex).length ;i++) {
				list.addItem(attInfs.getAttvalues().get(attIndex)[i]);
			}
			attributesTable.setWidget(row, 2, list);
		}
		
		Button remove = new Button("x");
		remove.addClickHandler(new ClickHandler() {
		      public void onClick(ClickEvent event) {
		        int removedIndex = currentAttributes.indexOf(attribute);
		        currentAttributes.remove(removedIndex);
		        attributesTable.removeRow(removedIndex + 1);
		      }
		});
		
		attributesTable.setWidget(row, 3, remove);
		
		attributesTable.getCellFormatter().addStyleName(row, 0, "nameColumn");
		attributesTable.getCellFormatter().addStyleName(row, 1, "missingColumn");
		attributesTable.getCellFormatter().addStyleName(row, 2, "valueColumn");
		attributesTable.getCellFormatter().addStyleName(row, 3, "removeColumn");
	}
}
